// Generated by CoffeeScript 1.10.0
(function() {
  var Csv, Importer, KEY, VALUE, importer;

  KEY = "Key";

  VALUE = "Value";

  String.prototype.startsWith = function(str) {
    return this.slice(0, str.length) === str;
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, '');
  };

  Csv = (function() {
    function Csv() {}

    Csv.save = function(filePath, data) {
      var file, text;
      text = Csv.toText(data);
      file = new File(filePath);
      file.encoding = "UTF-8";
      file.open("w", "TEXT");
      text = this.toText(data);
      file.write(text);
      return file.close();
    };

    Csv.toText = function(data) {
      var element, elementIndex, i, j, len, len1, line, lineIndex, text;
      text = "";
      for (lineIndex = i = 0, len = data.length; i < len; lineIndex = ++i) {
        line = data[lineIndex];
        for (elementIndex = j = 0, len1 = line.length; j < len1; elementIndex = ++j) {
          element = line[elementIndex];
          text += "\"" + (element.replace(/\"/g, "\"\"")) + "\"";
          if (elementIndex !== line.length - 1) {
            text += ",";
          }
        }
        if (lineIndex !== data.length - 1) {
          text += "\r\n";
        }
      }
      return text;
    };

    Csv.load = function(filePath) {
      var file, text;
      file = new File(filePath);
      file.encoding = "UTF-8";
      file.open("r", "TEXT");
      text = "";
      while (!file.eof) {
        text += file.readln();
        text += "\n";
      }
      file.close();
      return this.fromText(text);
    };

    Csv.fromText = function(text) {
      var body, element, elements, i, j, len, len1, line, lineArray, ref, tmp;
      body = [];
      line = "";
      tmp = "";
      ref = text.split('\n');
      for (i = 0, len = ref.length; i < len; i++) {
        tmp = ref[i];
        lineArray = [];
        tmp = tmp.replace(/\"\"/g, "<double quote>");
        if (line !== "") {
          line += "\n";
        }
        line += tmp;
        if (!line.endsWith(",")) {
          continue;
        }
        tmp = "";
        if (line.replace(/ /, "") === "") {
          continue;
        }
        elements = line.match(/"[^"]*"|[^,]+/g);
        if (elements) {
          for (j = 0, len1 = elements.length; j < len1; j++) {
            element = elements[j];
            if (element.startsWith("\"") && element.endsWith("\"")) {
              element = element.slice(1, element.length - 1).replace(/\"\"/g, "\"");
            }
            lineArray.push(element.replace(/<double quote>/g, "\""));
          }
        }
        body.push(lineArray);
        line = "";
      }
      return body;
    };

    return Csv;

  })();

  Importer = (function() {
    function Importer() {}

    Importer.prototype.run = function() {
      var dict, filePath, root;
      root = app.activeDocument;
      filePath = File.openDialog("ファイル選択 (*.csv)", "*");
      if (filePath) {
        dict = this.readCSV(filePath);
        return this.replaceText(dict, root);
      }
    };

    Importer.prototype.readCSV = function(filePath) {
      var data, dict, e, i, index, j, keyIndex, len, len1, line, ref, valueIndex;
      data = Csv.load(filePath);
      keyIndex = 0;
      valueIndex = 0;
      ref = data[0];
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        e = ref[index];
        if (e === KEY) {
          keyIndex = index;
        }
        if (e === VALUE) {
          valueIndex = index;
        }
      }
      dict = {};
      for (j = 0, len1 = data.length; j < len1; j++) {
        line = data[j];
        dict[line[keyIndex]] = line[valueIndex];
      }
      return dict;
    };

    Importer.prototype.replaceText = function(dict, root) {
      var i, len, newColor, ref, results, textFrame;
      newColor = new GrayColor();
      newColor.gray = 100.0;
      ref = root.textFrames;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        textFrame = ref[i];
        if (textFrame.locked) {
          continue;
        }
        if (textFrame.visible) {
          continue;
        }
        if (dict[textFrame.name]) {
          textFrame.contents = dict[textFrame.name];
          results.push(textFrame.textRange.characterAttributes.fillColor = newColor);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Importer;

  })();

  importer = new Importer();

  importer.run();

  alert('complete!');

}).call(this);
